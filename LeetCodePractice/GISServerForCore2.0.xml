<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LeetCodePractice</name>
    </assembly>
    <members>
        <member name="T:LeetCodePractice.HangFireHelper">
            <summary>
            HangFire帮助类
            </summary>
        </member>
        <member name="M:LeetCodePractice.HangFireHelper.StartHangFireTask">
            <summary>
            开始HangFire后台任务
            </summary>
        </member>
        <member name="M:LeetCodePractice.HangFireHelper.AutomaticSignOutTask">
            <summary>
            
            </summary>
        </member>
        <member name="M:LeetCodePractice.HangFireHelper.AutoTackDemo">
            <summary>
            自动任务Demo
            </summary>
            <returns></returns>
        </member>
        <member name="M:LeetCodePractice.Controllers.LeetCode1.SumTwoNumbers(System.Int32[],System.Int32)">
            <summary>
            给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。
            </summary>
        </member>
        <member name="T:LeetCodePractice.Controllers.Leetcode1046">
            <summary>
            最后一块石头的重量
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LeetCodePractice.Controllers.Leetcode1046.LastStoneWeight(System.Int32[])" -->
        <member name="T:LeetCodePractice.Controllers.LeetCode13">
            <summary>
            罗马数字转整数
            </summary>
        </member>
        <member name="M:LeetCodePractice.Controllers.LeetCode13.RomanToInt(System.String)">
             <summary>
             罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。
             字符          数值
              I             1
              V             5
              X             10
              L             50
              C             100
              D             500
              M             1000
              例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。
            通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：
            I 可以放在 V(5) 和 X(10) 的左边，来表示 4 和 9。
            X 可以放在 L(50) 和 C(100) 的左边，来表示 40 和 90。 
            C 可以放在 D(500) 和 M(1000) 的左边，来表示 400 和 900。
            给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。
             </summary>
             <param name="s"></param>
             <returns></returns>
        </member>
        <member name="T:LeetCodePractice.Controllers.LeetCode14">
            <summary>
            
            </summary>
        </member>
        <member name="M:LeetCodePractice.Controllers.LeetCode14.LongestCommonPrefix(System.String[])">
            <summary>
            编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 ""。
            </summary>
            <param name="strs"></param>
            <returns></returns>
        </member>
        <member name="T:LeetCodePractice.Controllers.LeetCode2">
            <summary>
            两数相加（给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储一位数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。）
            </summary>
        </member>
        <member name="T:LeetCodePractice.Controllers.LeetCode387">
            <summary>
            给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。
            </summary>
        </member>
        <member name="T:LeetCodePractice.Controllers.LeetCode509">
            <summary>
            斐波那契数
            </summary>
        </member>
        <member name="M:LeetCodePractice.Controllers.LeetCode509.Fib(System.Int32)">
            <summary>
            斐波那契数，通常用 F(n) 表示，形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是
            F(0) = 0，F(1) = 1
            F(n) = F(n - 1) + F(n - 2)，其中 n > 1
            给你 n ，请计算 F(n) 。
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:LeetCodePractice.Controllers.LeetCode7">
            <summary>
            给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
            </summary>
        </member>
        <member name="M:LeetCodePractice.Controllers.LeetCode7.Reverse(System.Int32)">
            <summary>
            给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:LeetCodePractice.Controllers.LeetCode830">
            <summary>
            较大分组的位置
            </summary>
        </member>
        <member name="M:LeetCodePractice.Controllers.LeetCode830.LargeGroupPositions(System.String)">
            <summary>
            在一个由小写字母构成的字符串 s 中，包含由一些连续的相同字符所构成的分组。例如，
            在字符串 s = "abbxxxxzyy" 中，就含有 "a", "bb", "xxxx", "z" 和 "yy" 这样的一些分组。分组可以用区间[start, end] 表示，其中 start 和 end 分别表示该分组的起始和终止位置的下标。
            上例中的 "xxxx" 分组用区间表示为[3, 6] 。我们称所有包含大于或等于三个连续字符的分组为 较大分组 。
            找到每一个 较大分组 的区间，按起始位置下标递增顺序排序后，返回结果。
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:LeetCodePractice.Controllers.LeetCode9">
            <summary>
            判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
            </summary>
        </member>
        <member name="M:LeetCodePractice.Controllers.LeetCode9.isPalindrome(System.Int32)">
            <summary>
            判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCodePractice.MvcOptionsExtensions.UseCentralRoutePrefix(Microsoft.AspNetCore.Mvc.MvcOptions,Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)">
            <summary>
            扩展方法
            </summary>
            <param name="opts"></param>
            <param name="routeAttribute"></param>
        </member>
        <member name="T:LeetCodePractice.RouteConvention">
            <summary>
            全局路由前缀配置
            </summary>
        </member>
        <member name="F:LeetCodePractice.RouteConvention._centralPrefix">
            <summary>
            定义一个路由前缀变量
            </summary>
        </member>
        <member name="M:LeetCodePractice.RouteConvention.#ctor(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)">
            <summary>
            调用时传入指定的路由前缀
            </summary>
            <param name="routeTemplateProvider"></param>
        </member>
        <member name="M:LeetCodePractice.RouteConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)">
            <summary>
            接口的Apply方法
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:LeetCodePractice.Startup.GetClassName(System.String)">
            <summary>  
            获取程序集中的实现类对应的多个接口
            </summary>  
            <param name="assemblyName">程序集</param>
        </member>
    </members>
</doc>
