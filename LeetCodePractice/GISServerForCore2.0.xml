<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LeetCodePractice</name>
    </assembly>
    <members>
        <member name="T:LeetCodePractice.HangFireHelper">
            <summary>
            HangFire帮助类
            </summary>
        </member>
        <member name="M:LeetCodePractice.HangFireHelper.StartHangFireTask">
            <summary>
            开始HangFire后台任务
            </summary>
        </member>
        <member name="M:LeetCodePractice.HangFireHelper.AutomaticSignOutTask">
            <summary>
            
            </summary>
        </member>
        <member name="M:LeetCodePractice.HangFireHelper.AutoTackDemo">
            <summary>
            自动任务Demo
            </summary>
            <returns></returns>
        </member>
        <member name="M:LeetCodePractice.Controllers.LeetCode1.SumTwoNumbers(System.Int32[],System.Int32)">
            <summary>
            给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。
            </summary>
        </member>
        <member name="T:LeetCodePractice.Controllers.LeetCode2">
            <summary>
            两数相加（给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储一位数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。）
            </summary>
        </member>
        <member name="T:LeetCodePractice.Controllers.LeetCode387">
            <summary>
            给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。
            </summary>
        </member>
        <member name="T:LeetCodePractice.Controllers.LeetCode7">
            <summary>
            给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
            </summary>
        </member>
        <member name="M:LeetCodePractice.Controllers.LeetCode7.Reverse(System.Int32)">
            <summary>
            给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:LeetCodePractice.MvcOptionsExtensions.UseCentralRoutePrefix(Microsoft.AspNetCore.Mvc.MvcOptions,Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)">
            <summary>
            扩展方法
            </summary>
            <param name="opts"></param>
            <param name="routeAttribute"></param>
        </member>
        <member name="T:LeetCodePractice.RouteConvention">
            <summary>
            全局路由前缀配置
            </summary>
        </member>
        <member name="F:LeetCodePractice.RouteConvention._centralPrefix">
            <summary>
            定义一个路由前缀变量
            </summary>
        </member>
        <member name="M:LeetCodePractice.RouteConvention.#ctor(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)">
            <summary>
            调用时传入指定的路由前缀
            </summary>
            <param name="routeTemplateProvider"></param>
        </member>
        <member name="M:LeetCodePractice.RouteConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)">
            <summary>
            接口的Apply方法
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:LeetCodePractice.Startup.GetClassName(System.String)">
            <summary>  
            获取程序集中的实现类对应的多个接口
            </summary>  
            <param name="assemblyName">程序集</param>
        </member>
    </members>
</doc>
